@page "/login"
@using WeiFin.Data
@using WeiFin.Models
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Newtonsoft.Json
@inject UserRegisterDBService userLoginDBService
@inject NavigationManager navigationManager
@using WeiFin.Services;


<PageTitle>LoginPage</PageTitle>
<h3>Login to Access Application</h3>

<div class="alert alert-info">
</div>

<div style="border:dashed 0px;">

    <EditForm Model="@userLogin" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="alert alert-danger" hidden="@userLogin.LoginFailureHidden">
            Invalid login attempt, please correct and try again.
        </div>
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label>
                User Name:
            </label>
            <InputText class="form-control" @bind-Value="userLogin.UserName" onclick="GetAccountNos"/>
            <ValidationMessage For="() => userLogin.UserName"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>
                User Password:
            </label>
            <InputText class="form-control" @bind-Value="userLogin.UserPassword" onclick="GetAccountNos" />
            <ValidationMessage For="() => userLogin.UserPassword"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>
                Account Number:
            </label>
            <InputSelect class="form-control" @bind-Value="userLogin.AccountNo">
                <option value="">-- Select Account Number --</option>
                @foreach (var accountNo in accountNoList)
                {
                    <option value="@accountNo">@accountNo</option>
                }
                <ValidationMessage For="() => userLogin.AccountNo"></ValidationMessage>
            </InputSelect>
        </div>
        <div>

        </div>
        <button class="@_spinnerClass" role="status" type="submit">Sign in</button>
        <button class="btn btn-primary" @onclick="SignUp">Sign up</button>
    </EditForm>
</div>

@code {

    // this bill is default new
    private int isNewAdd = 0;
    private string Message = String.Empty;
    private String _spinnerClass = "";
    private bool isLoginSuccess = false;

    //jwtToken is not used
    private string jwtToken = null;
    CustomAuthenticationStateProvider customAuthenticationStateProvider = new();

    List<UserLogin> accountNoList = new List<UserLogin>();

    // whole domain definition
    private UserLogin userLogin = new()
    {
    };
    protected async Task GetAccountNos()
    { 
        accountNoList = await userLoginDBService.GetAccountNosByUserAsync(userLogin);
    }


    protected override async Task OnInitializedAsync()
    {
        userLogin = new() { };
        Message = String.Empty;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        //Valiate user acount
       // var successful = await ValidateLogin(editContext);
        //if (!successful)
        //    return
        //Call login and redirect
        //await customAuthenticationStateProvider.Login(jwtToken);

        //check this user if exist
        await SignIn();
        //await Task.Delay(500);// delay half second
        _spinnerClass = "";
        this.StateHasChanged();
    }

    //public async Task<bool> ValidateLogin(EditContext editContext, out string jwtToken)
    public async Task<bool> ValidateLogin(EditContext editContext)
    {
        //default user 
        if (userLogin.UserName.Equals("Test") && userLogin.UserPassword.Equals("Test"))
        {
            jwtToken = "123456";
            return true;
        }

        //Not valid
        jwtToken = null;
        userLogin.LoginFailureHidden = false;
        return false;
    }

    private async Task SignIn()
    {
        UserRegister userInfo = await userLoginDBService.GetUserRegisterByIdAsync(userLogin.UserName, userLogin.UserPassword);
        //sign in success
        Random random = new();
        //json string 
        String userLoginResponseInfo = "{UserName:" + userInfo.UserName 
                             + ";UserPassword:" + userInfo.UserPassword
                             //random number
                             + ";AccessToken:" + userInfo.UserName + random.Next()
                             + ";RefreshToken:" + userInfo.UserName + random.Next()
                             + ";UserAvatar:" + userInfo.UserAvatar
                             + "}";
        if (userInfo != null && !String.IsNullOrEmpty(userInfo.UserName))
        {
            isLoginSuccess = true;

            //Json string change to Array or Model
            var tokenResponse = JsonConvert.DeserializeObject<UserLogin>(userLoginResponseInfo);

            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(tokenResponse.AccessToken) as JwtSecurityToken;

            string userID = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.NameId).Value;
            string name = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.Name).Value;
            string userAvatar = jsontoken.Claims.FirstOrDefault(f => f.Type == "UserAvatar").Value;

            string email = userInfo.Email;

            var userBasicDetail = new UserBasicDetail
                {
                    Email = email,
                    Name = name,
                    AccessToken = tokenResponse.AccessToken,
                    RefreshToken = tokenResponse.RefreshToken,
                    UserAvatar = "",
                    UserID = userID
                };
            
            //Model change to Json string
            string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);
            //store token 
            await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicInfoStr);
            Setting.UserBasicDetail = userBasicDetail;

            navigationManager.NavigateTo("/welcomepage");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password", "OK");
        }
    }
    //register new user
    private void SignUp()
    {
        navigationManager.NavigateTo("/registerpage");
    }
}
