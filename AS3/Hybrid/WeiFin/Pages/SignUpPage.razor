@page "/registerpage"
@using WeiFin.Data
@using WeiFin.Models
@inject UserRegisterDBService userRegisterDBService
@inject NavigationManager navigationManager

<PageTitle>SignUpPage</PageTitle>

<div style="border:dashed 0px;">
    <h2>Register</h2>

    <EditForm Model="@userRegister" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label>
                User Name:
            </label>
            <InputText class="form-control" @bind-Value="userRegister.UserName" />
        </div>
        <div class="form-group">
            <label>
                User Password:
            </label>
            <InputText class="form-control" @bind-Value="userRegister.UserPassword" />
        </div>
        <div class="form-group">
            <label>
                Account Number:
            </label>
            <InputText class="form-control" @bind-Value="userRegister.AccountNo" />
        </div>
        <div class="form-group">
            <label>
                Email:
            </label>
            <InputText class="form-control" @bind-Value="userRegister.Email" />
        </div>
        <div class="mt-2 text-end">
            <NavLink class="nav-link" href="/login">
                <span>Already have an account?</span>
            </NavLink>
        </div>
        <button class="btn btn-primary" type="submit">Sign up</button>
    </EditForm>
</div>

@code {

    // this bill is default new
    private int isNewAdd = 0;
    private string Message = String.Empty;
    private string _spinnerClass = "";
    private string _userAvatar = "images/user.png";
    private string _imageBase64Data;
    // whole domain definition
    private UserRegister userRegister = new()
    {
    };

    protected override async Task OnInitializedAsync()
    {
        Message = String.Empty;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        String validResult = ValidateData(editContext);
        if (!validResult.Equals(String.Empty))
        {
            return;
        }

        await userRegisterDBService.SaveUserRegisterAsync(userRegister);
        userRegister = new() { };
        Message = "The user is registered successfully!";
    }

    /*
    * valid the bill information
    */
    private String ValidateData(EditContext editContext)
    {
        if (editContext.Model is not Bill bill)
        {
            Message = "User object is invalid";
            return Message;
        }

        if (String.IsNullOrEmpty(userRegister.UserName))
        {
            Message = "User name should not be empty";
            return Message;
        }

        if (String.IsNullOrEmpty(userRegister.UserPassword))
        {
            Message = "User Password should not be empty";
            return Message;
        }

        if (String.IsNullOrEmpty(userRegister.AccountNo))
        {
            Message = "Account Number should not be empty";
            return Message;
        }

        if (String.IsNullOrEmpty(userRegister.Email))
        {
            Message = "Email should not be empty";
            return Message;
        }
        Message = String.Empty;
        return Message;
    }

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        if (!string.IsNullOrWhiteSpace(_imageBase64Data))
        {
            userRegister.UserAvatar = _imageBase64Data;
        }

        var response = await userRegisterDBService.SaveUserRegisterAsync(userRegister);
        if (response != 0)
        {
            await App.Current.MainPage.DisplayAlert("Success", "User Registered.", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "", "OK");
        }
        _spinnerClass = "";
        this.StateHasChanged();
    }

    private async void DisplayAction()
    {
        string response = await App.Current.MainPage.DisplayActionSheet("Select Option", "OK", null, "Take Photo", "Add Photo");

        if (response == "Take Photo")
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                var photo = await MediaPicker.Default.CapturePhotoAsync();
                if (photo != null)
                {
                    byte[] imageBytes;
                    var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                    var stream = await photo.OpenReadAsync();

                    using (MemoryStream ms = new MemoryStream())
                    {
                        stream.CopyTo(ms);
                        imageBytes = ms.ToArray();
                    }
                    _imageBase64Data = Convert.ToBase64String(imageBytes);
                    _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                    this.StateHasChanged();
                }
            }
        }
        else if (response == "Add Photo")
        {
            var photo = await MediaPicker.Default.PickPhotoAsync();
            if (photo != null)
            {
                byte[] imageBytes;
                var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                var stream = await photo.OpenReadAsync();

                using (MemoryStream ms = new MemoryStream())
                {
                    stream.CopyTo(ms);
                    imageBytes = ms.ToArray();
                }
                _imageBase64Data = Convert.ToBase64String(imageBytes);
                _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                this.StateHasChanged();
            }
        }
    }

}
