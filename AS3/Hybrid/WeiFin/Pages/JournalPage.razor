@page "/journalpage"
@using WeiFin.Data
@using WeiFin.Models
@inject BillDBService billDBService
@inject BillTypeDBService billTypeDBService
@inject NavigationManager navigationManager

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>JournalReportPage</PageTitle>

<div style="border:dashed 0px;">
    <h2>Journal Report</h2>

    <EditForm Model="@reportCondition" OnValidSubmit="OnValidSubmit">
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label>
                Year:
                <InputSelect class="form-control" @bind-Value="reportCondition.Year">
                    @foreach (var year in yearArray)
                    {
                        <option value="@year">@year</option>
                    }
                </InputSelect>
                 Start Month:
                <InputSelect class="form-control" @bind-Value="reportCondition.StartMonth">
                    @foreach (var startMonth in monthArray)
                    {
                        <option value="@startMonth">@startMonth</option>
                    }
                </InputSelect>
                End Month:
                <InputSelect class="form-control" @bind-Value="reportCondition.EndMonth">
                    @foreach (var endMonth in monthArray)
                    {
                        <option value="@endMonth">@endMonth</option>
                    }
                </InputSelect>
            </label>
            <label>
                Bill Type:
                <InputSelect class="form-control" @bind-Value="reportCondition.BillType">
                    <option value=""></option>
                    @foreach (var billType in billTypeList)
                    {
                    <option value="@billType.BillTypeName">@billType.BillTypeName</option>
                    }                   
                </InputSelect>
            </label>
        </div>

        <div class="form-group">
            <label>
                Bill Direction:
            </label>
            <InputSelect class="form-control" @bind-Value="reportCondition.BillDirection">
                <option value=""></option>
                <option value="income">income</option>
                <option value="payment">payment</option>                
            </InputSelect>                        
        </div>
        <button class="btn btn-primary" @onclick="generateJournal">Search</button>
    </EditForm>
</div>

@if (bills == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Bill Date</th>
                <th>Bill Type</th>
                <th>Bill No</th>
                <th>Bill Name</th>
                <th>Account Number</th>
                <th>Abstract</th>
                <th>Income</th>
                <th>Payment</th>
                <th>Bill Direction</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in bills)
            {
                <tr>
                    <td>@bill.BillDate.ToShortDateString()</td>
                    <td>@bill.BillType</td>
                    <td>@bill.BillNo</td>
                    <td>@bill.BillName</td>
                    <td>@bill.AccountNo</td>
                    <td>@bill.BillAbstract</td>
                    <td>@bill.Income</td>
                    <td>@bill.Payment</td>
                    <td>@bill.BillDirection</td>
                    <td>@bill.RowSumAmount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string Message = String.Empty;

    private List<Bill> bills;
    // whole domain definition
    private ReportCondition reportCondition = new()
    {
    };

    List<BillType> billTypeList = new List<BillType>();
    int[] yearArray = new int[] { 2018, 2019, 2020, 2022, 2023};
    int[] monthArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };

    protected override async Task OnInitializedAsync()
    {
        billTypeList = await billTypeDBService.GetAllBillTypesAsync();
        Message = String.Empty;
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        ValidateData(editContext);
    }
    /*
    * valid the bill information
    */
    private String ValidateData(EditContext editContext)
    {
        if (editContext.Model is not ReportCondition reportCondition)
        {
            Message = "ReportCondition object is invalid";
            return Message;
        }
        Message = String.Empty;
        return Message;
    }

    private async Task generateJournal()
    {
        bills = await billDBService.GetBillsNotDoneAsync(reportCondition);
        int oldBillMonth = bills[0].BillMonth;
        int currentBillMonth;
        decimal incomeSumAmount = 0; // year sum
        decimal paymentSumAmount = 0;
        decimal rowSumAmount = 0; // the money summary in last column in each row
        decimal incomeMonthSumAmount = 0;
        decimal paymentMonthSumAmount = 0;
        foreach (Bill bill in bills)
        {
            currentBillMonth = bill.BillMonth;
            if (currentBillMonth != oldBillMonth)
            {
                //add month money summary row
                Bill monthBillRow = new Bill { };
                monthBillRow.BillMonth = oldBillMonth;
                monthBillRow.BillAbstract = "monthly total";
                monthBillRow.Income = incomeMonthSumAmount;
                monthBillRow.Payment = paymentMonthSumAmount;
                monthBillRow.RowSumAmount = rowSumAmount;
                incomeMonthSumAmount = 0;
                paymentMonthSumAmount = 0;
                bills.Add(monthBillRow);

                //add year money summary row            
                Bill yearBillRow = new Bill { };
                yearBillRow.BillAbstract = "Annual total";
                yearBillRow.Income = incomeSumAmount;
                yearBillRow.Payment = paymentSumAmount;
                yearBillRow.RowSumAmount = rowSumAmount;
                bills.Add(yearBillRow);
            }
            if (bill.BillDirection == 1) // income
            {
                incomeSumAmount += bill.BillAmount;
                incomeMonthSumAmount += bill.BillAmount;
            }
            else
            {
                paymentSumAmount += bill.BillAmount;
                paymentMonthSumAmount += bill.BillAmount;
            }
            rowSumAmount = incomeSumAmount - paymentSumAmount;
            bill.RowSumAmount = rowSumAmount;
        }
    }
}
