@page "/journalpage"
@using WeFin.Data
@using WeFin.Models
@using AntDesign
@using AntDesign.TableModels
@using System.Text.Json
@inject BillDBService billDBService
@inject BillTypeDBService billTypeDBService
@inject NavigationManager navigationManager

<PageTitle>JournalReportPage</PageTitle>

<div style="border:dashed 0px;">
    <h2>Journal Report</h2>

    <EditForm Model="@reportCondition" OnValidSubmit="OnValidSubmit">
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label class="form-control">
                Year:
                <InputSelect  @bind-Value="reportCondition.Year">
                    @foreach (var year in yearArray)
                    {
                        <option value="@year">@year</option>
                    }
                </InputSelect>
                 Start Month:
                <InputSelect @bind-Value="reportCondition.StartMonth">
                    @foreach (var startMonth in monthArray)
                    {
                        <option value="@startMonth">@startMonth</option>
                    }
                </InputSelect>
                End Month:
                <InputSelect @bind-Value="reportCondition.EndMonth">
                    @foreach (var endMonth in monthArray)
                    {
                        <option value="@endMonth">@endMonth</option>
                    }
                </InputSelect>
                Bill Type:
                <InputSelect @bind-Value="reportCondition.BillType">
                    <option value=""></option>
                    @foreach (var billType in billTypeList)
                    {
                    <option value="@billType.BillTypeName">@billType.BillTypeName</option>
                    }                   
                </InputSelect>
                <button class="btn btn-primary" @onclick="generateJournal">Search</button>
            </label>
        </div>        
    </EditForm>
</div>

@if (bills == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table @ref="table"
       TItem="Bill"
       DataSource="@bills"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       RowClassName="@(x =>{ i=1-i; return i==0?"evenrow":""; })"
       OnChange="OnChange">
        <Selection Key="@(context.Id.ToString())" />
        <PropertyColumn Property="c=>c.Id" Sortable Hidden />
        <PropertyColumn Title="Bill Date" Property="c=>c.BillDate" Format="yyyy-MM-dd" />
        <PropertyColumn Title="Bill Type" Property="c=>c.BillType"  />        
        <PropertyColumn Title="Bill Number" Property="c=>c.BillNo"  />
        <PropertyColumn Title="Bill Name" Property="c=>c.BillName"  />
        <PropertyColumn Title="Abstract" Property="c=>c.BillAbstract"  />
        <PropertyColumn Title="Income" Property="c=>c.Income"  />
        <PropertyColumn Title="Payment" Property="c=>c.Payment"  />
        <PropertyColumn Title="Balance Direction" Property="c=>c.BalanceDirection"  />
        <PropertyColumn Title="Balance" Property="c=>c.RowSumAmount"  />        
        <ActionColumn>
        </ActionColumn>
    </Table>
    <br />
    <p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

    <br />

    <Button Type="@ButtonType.Primary" OnClick="()=> { _pageIndex--; }">Previous page</Button>
    <Button Type="@ButtonType.Primary" OnClick="()=> { _pageIndex++; }">Next Page</Button>

    <style>
        .evenrow {
            background-color: lightblue;
        }
    </style>    
}

@code {
    private string Message = String.Empty;
    private List<Bill> bills;
    IEnumerable<Bill> selectedRows;
    ITable table;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 20;
    int i = 0;

    List<BillType> billTypeList = new List<BillType>();
    int[] yearArray = new int[] { 2018, 2019, 2020, 2022, 2023};
    int[] monthArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };

    // whole domain definition
    private ReportCondition reportCondition = new()
    {
        Year = DateTime.Today.Year,
        StartMonth = DateTime.Today.Month,
        EndMonth = DateTime.Today.Month
    };

    protected override async Task OnInitializedAsync()
    {
        billTypeList = await billTypeDBService.GetAllBillTypesAsync();
        Message = String.Empty;
    }

    public void OnChange(QueryModel<Bill> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        //bill.BillDate.ToShortDateString()
        ValidateData(editContext);
    }
    /*
    * valid the bill information
    */
    private String ValidateData(EditContext editContext)
    {
        if (editContext.Model is not ReportCondition reportCondition)
        {
            Message = "ReportCondition object is invalid";
            return Message;
        }
        Message = String.Empty;
        return Message;
    }

    private async Task generateJournal()
    {
        bills = await billDBService.GetBillJournalReportAsync(reportCondition);
        if (bills == null || bills.Count == 0 )
        {
            return;
        }
        int oldBillMonth = bills[0].BillMonth;
        int currentBillMonth;
        decimal incomeSumAmount = 0; // year sum
        decimal paymentSumAmount = 0;
        decimal rowSumAmount = 0; // the money summary in last column in each row
        decimal incomeMonthSumAmount = 0;
        decimal paymentMonthSumAmount = 0;
        foreach (Bill bill in bills)
        {
            currentBillMonth = bill.BillMonth;
            if (currentBillMonth != oldBillMonth)
            {
                //add month money summary row
                Bill monthBillRow = new Bill { };
                monthBillRow.BillMonth = oldBillMonth;
                monthBillRow.BillAbstract = "monthly total";
                monthBillRow.Income = incomeMonthSumAmount;
                monthBillRow.Payment = paymentMonthSumAmount;
                monthBillRow.RowSumAmount = rowSumAmount;
                incomeMonthSumAmount = 0;
                paymentMonthSumAmount = 0;
                bills.Add(monthBillRow);

                //add year money summary row            
                Bill yearBillRow = new Bill { };
                yearBillRow.BillAbstract = "Annual total";
                yearBillRow.Income = incomeSumAmount;
                yearBillRow.Payment = paymentSumAmount;
                yearBillRow.RowSumAmount = rowSumAmount;
                bills.Add(yearBillRow);
            }
            if (bill.BillDirection == 1) // income
            {
                incomeSumAmount += bill.BillAmount;
                incomeMonthSumAmount += bill.BillAmount;
            }
            else
            {
                paymentSumAmount += bill.BillAmount;
                paymentMonthSumAmount += bill.BillAmount;
            }
            rowSumAmount = rowSumAmount + incomeSumAmount - paymentSumAmount;
            if (rowSumAmount > 0)
            {
                bill.BalanceDirection = "Profit";
            }
            else if (rowSumAmount == 0)
            {
                bill.BalanceDirection = "Balance";
            }
            else
            {
                bill.BalanceDirection = "Debt";
            }
            bill.RowSumAmount = rowSumAmount;
            bill.RowSumAmount = Math.Abs(rowSumAmount);
        }
    }
}
