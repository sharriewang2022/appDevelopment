@page "/ledgerpage"
@using WeFin.Data
@using WeFin.Models
@using AntDesign
@using AntDesign.TableModels
@using System.Text.Json
@inject BillDBService billDBService
@inject BillTypeDBService billTypeDBService
@inject NavigationManager navigationManager


<PageTitle>Ledger ReportPage</PageTitle>

<div style="border:dashed 0px;">
    <h2>Ledger Report</h2>

    <EditForm Model="@reportCondition" OnValidSubmit="OnValidSubmit">
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label class="form-control">
                Year:
                <InputSelect @bind-Value="reportCondition.Year">
                    @foreach (var year in yearArray)
                    {
                        <option value="@year">@year</option>
                    }
                </InputSelect>
                Start Month:
                <InputSelect @bind-Value="reportCondition.StartMonth">
                    @foreach (var startMonth in monthArray)
                    {
                        <option value="@startMonth">@startMonth</option>
                    }
                </InputSelect>
                End Month:
                <InputSelect @bind-Value="reportCondition.EndMonth">
                    @foreach (var endMonth in monthArray)
                    {
                        <option value="@endMonth">@endMonth</option>
                    }
                </InputSelect>
                Bill Type:
                <InputSelect @bind-Value="reportCondition.BillType">
                    <option value=""></option>
                    @foreach (var billType in billTypeList)
                    {
                        <option value="@billType.BillTypeName">@billType.BillTypeName</option>
                    }
                </InputSelect>
                <button class="btn btn-primary" @onclick="generateLedger">Search</button>
            </label>
        </div>        
    </EditForm>
</div>

@if (ledgerReportList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Table @ref="table"
       TItem="LedgerReportEntity"
       DataSource="@ledgerReportList"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       RowClassName="@(x =>{ i=1-i; return i==0?"evenrow":""; })"
       OnChange="OnChange">
        <PropertyColumn Title="Year" Property="c=>c.BillYear" />
        <PropertyColumn Title="Month" Property="c=>c.BillMonth" />
        <PropertyColumn Title="Abstract" Property="c=>c.Abstract" />
        <PropertyColumn Title="Total Income" Property="c=>c.TotalIncome" />
        <PropertyColumn Title="Total Payment" Property="c=>c.TotalPayment" />
        <PropertyColumn Title="Balance Direction" Property="c=>c.BalanceDirection" />
        <PropertyColumn Title="Balance" Property="c=>c.RowSumAmount" />
        
        <ActionColumn>
        </ActionColumn>
    </Table>
    <br />
    <p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

    <br />

    <Button Type="@ButtonType.Primary" OnClick="()=> { _pageIndex--; }">Previous page</Button>
    <Button Type="@ButtonType.Primary" OnClick="()=> { _pageIndex++; }">Next Page</Button>

    <style>
        .evenrow {
            background-color: lightblue;
        }
    </style>
}

@code {
    private string Message = String.Empty;

    private List<LedgerReportEntity> ledgerReportList;
    IEnumerable<LedgerReportEntity> selectedRows;
    ITable table;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 20;
    int i = 0;

    // whole domain definition
    private ReportCondition reportCondition = new()
    {
        Year = DateTime.Today.Year,
        StartMonth = DateTime.Today.Month,
        EndMonth = DateTime.Today.Month
    };

    List<BillType> billTypeList = new List<BillType>();
    int[] yearArray = new int[] { 2018, 2019, 2020, 2022, 2023 };
    int[] monthArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };

    protected override async Task OnInitializedAsync()
    {
        billTypeList = await billTypeDBService.GetAllBillTypesAsync();
        Message = String.Empty;
    }

    public void OnChange(QueryModel<LedgerReportEntity> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        ValidateData(editContext);
    }
    /*
    * valid the bill information
    */
    private String ValidateData(EditContext editContext)
    {
        if (editContext.Model is not ReportCondition reportCondition)
        {
            Message = "ReportCondition object is invalid";
            return Message;
        }
        Message = String.Empty;
        return Message;
    }

    private async Task generateLedger()
    {
        ledgerReportList = await billDBService.GetBillsLedgerSumAsync(reportCondition);
        if (ledgerReportList == null || ledgerReportList.Count == 0)
        {
            return;
        }

        decimal rowSumAmount = 0; // the money summary in last column in each row
        decimal incomeYearSumAmount = 0;
        decimal paymenYearSumAmount = 0;
        foreach (LedgerReportEntity ledgerReport in ledgerReportList)
        {            
            ledgerReport.Abstract = "current period total";
            rowSumAmount += ledgerReport.TotalIncome - ledgerReport.TotalPayment;
            // set each month row balance column
            ledgerReport.RowSumAmount = rowSumAmount;
            
            incomeYearSumAmount += ledgerReport.TotalIncome;
            paymenYearSumAmount += ledgerReport.TotalPayment;
            //add year money summary row
            LedgerReportEntity yearLedgerRow = new LedgerReportEntity{ };
            yearLedgerRow.BillYear = ledgerReport.BillYear;
            yearLedgerRow.BillMonth = ledgerReport.BillMonth;
            yearLedgerRow.Abstract = "ccumulative total"; // year sum row
            yearLedgerRow.TotalIncome = incomeYearSumAmount;
            yearLedgerRow.TotalPayment = paymenYearSumAmount;         

            if (rowSumAmount > 0)
            {
                ledgerReport.BalanceDirection = "Profit";
                yearLedgerRow.BalanceDirection = "Profit";
            }
            else if (rowSumAmount == 0)
            {
                ledgerReport.BalanceDirection = "Balance";
                yearLedgerRow.BalanceDirection = "Balance";
            }
            else
            {
                ledgerReport.BalanceDirection = "Debt";
                yearLedgerRow.BalanceDirection = "Debt";
            }
            ledgerReport.RowSumAmount = Math.Abs(rowSumAmount);
            yearLedgerRow.RowSumAmount = Math.Abs(rowSumAmount);

            // add year sum row
            ledgerReportList.Add(yearLedgerRow);
        }
    }
}
