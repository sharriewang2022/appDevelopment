@page "/login"
@using WeFin.Data
@using WeFin.Models
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Newtonsoft.Json
@inject UserRegisterDBService userLoginDBService
@inject NavigationManager navigationManager
@using WeFin.Services;


<PageTitle>LoginPage</PageTitle>
<h3>Log In</h3>

<!--
<div class="alert alert-info">
    this is a test
</div>
-->

<div style="border:dashed 0px;">

    <EditForm Model="@userLogin" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="alert alert-danger" hidden="@userLogin.LoginFailureHidden">
            Invalid login attempt, please correct and try again.
        </div>
        <div style="border:dashed 0px; color:red;">@Message</div>
        <div class="form-group">
            <label>
                User Name<font color=red>*</font>:
            </label>
            <InputText class="form-control" @bind-Value="userLogin.UserName" OnBlur="GetAccountNos" />
            <ValidationMessage For="() => userLogin.UserName"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>
                User Password<font color=red>*</font>:
            </label>
            <InputPassword class="form-control" @bind-Value="userLogin.UserPassword" OnBlur="GetAccountNos" />
            <ValidationMessage For="() => userLogin.UserPassword"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>
                Account Number<font color=red>*</font>:
            </label>
            <InputSelect class="form-control" @bind-Value="userLogin.AccountNo">
                <option value="">-- Select Account Number --</option>
                @foreach (var userAccount in accountNoList)
                {
                    <option value="@userAccount.AccountNo">@userAccount.AccountNo</option>
                }
                <ValidationMessage For="() => userLogin.AccountNo"></ValidationMessage>
            </InputSelect>
        </div>
        <div class="mt-2 text-end">
            <NavLink class="nav-link" href="registerpage">
                <span>Click here to create a new account</span>
            </NavLink>
        </div>
    
        <div class="text-center mt-2">
            <button class="btn btn-primary"  role="status"  type="submit">
                <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                Sign in
            </button>
            <button class="btn btn-primary" @onclick="SignUp">Sign up</button>
        </div>
        
    </EditForm>
</div>

@code {

    // this bill is default new
    //private int isNewAdd = 0;
    //private bool isLoginSuccess = false;
    private string Message = String.Empty;
    private String _spinnerClass = "";

    //jwtToken is not used
    //private string jwtToken = null;
    CustomAuthenticationStateProvider customAuthenticationStateProvider = new();

    List<UserLogin> accountNoList = new List<UserLogin>();

    // whole domain definition
    private UserLogin userLogin = new()
    {
    };
    protected async Task GetAccountNos()
    { 
        accountNoList = await userLoginDBService.GetAccountNosByUserAsync(userLogin);
    }


    protected override async Task OnInitializedAsync()
    {
        userLogin = new(){ };
        Message = String.Empty;
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        //Valiate default user acount "Test"
        var successful = await ValidateLogin(editContext);
        if (successful)
        {
            Random random = new();
            var defaultUserBasicDetail = new UserBasicDetail
            {
                Email = userLogin.UserName,
                Name = userLogin.UserName,
                AccessToken = userLogin.UserName + random.Next(),
                RefreshToken = userLogin.UserName + random.Next(),
                UserAvatar = "",
                UserID = userLogin.UserName,
                AccountNo = userLogin.AccountNo
            };
            await SuccessLogin(defaultUserBasicDetail);
        }

        //Call login and redirect
        //await customAuthenticationStateProvider.Login(jwtToken);

        //check NOT default user if exist
        await SignIn();
        //await Task.Delay(500);// delay half second
        _spinnerClass = "";
        this.StateHasChanged();
    }

    //public async Task<bool> ValidateLogin(EditContext editContext, out string jwtToken)
    public async Task<bool> ValidateLogin(EditContext editContext)
    {
        //default user 
        if (userLogin.UserName.Equals("sa") && userLogin.UserPassword.Equals("1"))
        {
            //jwtToken = "123456";
            return true;
        }

        //Not valid
        //jwtToken = null;
        userLogin.LoginFailureHidden = false;
        return false;
    }

    private async Task SignIn()
    {
        UserRegister userInfo = await userLoginDBService.GetUserRegisterByIdAsync(userLogin.UserName, userLogin.UserPassword);
        //sign in success
        Random random = new();
        //json string 
        String userLoginResponseInfo = "{\"UserName\":\"" + userInfo.UserName
                             + "\",\"UserPassword\":\"" + userInfo.UserPassword
                             //random number
                             + "\",\"AccessToken\":\"" + userInfo.UserName + random.Next()
                             + "\",\"RefreshToken\":\"" + userInfo.UserName + random.Next()
                             + "\",\"UserAvatar\":\"" + userInfo.UserAvatar
                             + "\"}";
        if (userInfo != null && !String.IsNullOrEmpty(userInfo.UserName))
        {
            //isLoginSuccess = true;

            //Json string change to Array or Model
            var tokenResponse = JsonConvert.DeserializeObject<UserLogin>(userLoginResponseInfo);

            /*
            * JWT token have 3 parts, and need Base64, could not be random number
           var handler = new JwtSecurityTokenHandler();
           var jsontoken = handler.ReadToken(tokenResponse.AccessToken) as JwtSecurityToken;
           string userID = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.NameId).Value;
           string name = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.Name).Value;
           string userAvatar = jsontoken.Claims.FirstOrDefault(f => f.Type == "UserAvatar").Value;
            */
            string userID = userInfo.UserID;
            string name = userInfo.UserName;
            string email = userInfo.Email;
            string accountNo = userLogin.AccountNo;

            var userBasicDetail = new UserBasicDetail
                {
                    Email = email,
                    Name = name,
                    AccessToken = tokenResponse.AccessToken,
                    RefreshToken = tokenResponse.RefreshToken,
                    UserAvatar = "",
                    UserID = userID,
                    AccountNo = accountNo
                };

            //Model change to Json string
            string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);
            //store token 
            await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicInfoStr);
            Setting.UserBasicDetail = new UserBasicDetail
                {
                    Email = email,
                    Name = name,
                    AccessToken = tokenResponse.AccessToken,
                    RefreshToken = tokenResponse.RefreshToken,
                    UserAvatar = "",
                    UserID = userID,
                    AccountNo = accountNo
                };

            //Setting.UserBasicDetail = userBasicDetail.;


            navigationManager.NavigateTo("/welcomepage");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password", "OK");
        }
    }

    private async Task SuccessLogin(UserBasicDetail userBasicDetail)
    {
        //Model change to Json string
        string userBasicInfoStr = JsonConvert.SerializeObject(userBasicDetail);
        //store token
        await SecureStorage.SetAsync(nameof(Setting.UserBasicDetail), userBasicInfoStr);
        Setting.UserBasicDetail = userBasicDetail;

        navigationManager.NavigateTo("/welcomepage");
    }
    //register new user
    private void SignUp()
    {
        navigationManager.NavigateTo("/registerpage");
    }
}
